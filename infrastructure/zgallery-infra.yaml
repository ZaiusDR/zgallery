AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates the Stack for ZGallery Webapp'

Resources:
  ZGalleryDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: CNAME
      Name: zgallery.esuarez.info
      HostedZoneName: esuarez.info.
      Comment: DNS name for ZGallery
      TTL: 300
      ResourceRecords:
        - !GetAtt ZGalleryALB.DNSName

  ZGalleryBackendDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: CNAME
      Name: backend.zgallery.esuarez.info
      HostedZoneName: esuarez.info.
      Comment: DNS name for ZGallery Backend Service
      TTL: 300
      ResourceRecords:
        - !GetAtt ZGalleryALB.DNSName

  ZGalleryDevBackendDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: CNAME
      Name: backend.dev.zgallery.esuarez.info
      HostedZoneName: esuarez.info.
      Comment: DNS name for ZGallery Dev Backend Service
      TTL: 300
      ResourceRecords:
        - !GetAtt ZGalleryALB.DNSName

  ZGalleryFrontendDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: CNAME
      Name: frontend.zgallery.esuarez.info
      HostedZoneName: esuarez.info.
      Comment: DNS name for ZGallery Frontend Service
      TTL: 300
      ResourceRecords:
        - !GetAtt ZGalleryALB.DNSName

  ZGalleryDevFrontendDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: CNAME
      Name: frontend.dev.zgallery.esuarez.info
      HostedZoneName: esuarez.info.
      Comment: DNS name for ZGallery Dev Frontend Service
      TTL: 300
      ResourceRecords:
        - !GetAtt ZGalleryALB.DNSName

  ZGalleryMediaDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: CNAME
      Name: media.esuarez.info
      HostedZoneName: esuarez.info.
      Comment: DNS name for ZGallery Dev Frontend Service
      TTL: 300
      ResourceRecords:
        - !GetAtt ZGalleryCloudFrontDistribution.DomainName

  ZGalleryCloudFrontOriginAccessId:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: zgallery-origin-access-id

  ZGalleryCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - media.esuarez.info
        Enabled: true
        Origins:
        - DomainName: !GetAtt ZGalleryPicturesBucket.DomainName
          Id: zgallery-bucket-origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${ZGalleryCloudFrontOriginAccessId}
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: zgallery-bucket-origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: '{{resolve:ssm:/acm/certificate/arn:2}}'
          SslSupportMethod: sni-only

  ZGalleryPicturesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: zgallery.pictures
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:create-thumbnails-function:live
    DependsOn:
      ZGalleryLambdaInvokePermission

  # This is terrible but adding a bucket to the Lambda template would be a lot of work
  ZGalleryLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:create-thumbnails-function:live
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: arn:aws:s3:::zgallery.pictures

  ZGalleryPicturesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ZGalleryPicturesBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::${ZGalleryPicturesBucket}/*
            Principal:
              CanonicalUser: !GetAtt ZGalleryCloudFrontOriginAccessId.S3CanonicalUserId

  ZGalleryALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'zgallery-alb-sg'
      GroupDescription: 'Allow http for ALB'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ZGalleryERC:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: 'zgallery-backend'
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
            {
              "rulePriority": 10,
              "description": "Keep 3 images only",
              "selection":
              {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 3
              },
            "action": { "type": "expire" }
            }]
          }

  ZGalleryFrontendERC:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: 'zgallery-frontend'
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
            {
              "rulePriority": 10,
              "description": "Keep 3 images only",
              "selection":
              {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 3
              },
            "action": { "type": "expire" }
            }]
          }

  ZGalleryALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: zgallery-alb
      SecurityGroups:
        - !GetAtt ZGalleryALBSecurityGroup.GroupId
      Subnets:
        - subnet-0446e35e
        - subnet-5de38815
        - subnet-81e07be7

  ZGalleryALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref ZGalleryALB
      Port: 80
      Protocol: HTTP

  ZGalleryALBHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ZGalleryALBTargetGroup
      LoadBalancerArn: !Ref ZGalleryALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: '{{resolve:ssm:/acm/certificate/web/arn:2}}'

  ZGalleryBackendCertificateForListener:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties:
      Certificates:
        - CertificateArn: '{{resolve:ssm:/acm/certificate/backend/arn:1}}'
      ListenerArn: !Ref ZGalleryALBHTTPSListener

  ZGalleryRedirectFrontendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ZGalleryALBTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Ref ZGalleryDNS
              - !Ref ZGalleryFrontendDNS
      ListenerArn: !Ref ZGalleryALBHTTPSListener
      Priority: 20

  ZGalleryRedirectBackendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ZGalleryBackendALBTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Ref ZGalleryBackendDNS
      ListenerArn: !Ref ZGalleryALBHTTPSListener
      Priority: 30

  ZGalleryALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 5000
      Protocol: HTTP
      TargetType: instance
      VpcId: vpc-f4c2ec92
      HealthCheckPath: /
      HealthyThresholdCount: 2

  ZGalleryBackendALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3000
      Protocol: HTTP
      TargetType: instance
      VpcId: vpc-f4c2ec92
      HealthCheckPath: /health-check
      HealthyThresholdCount: 2


Outputs:
  ZGalleryTG:
    Description: ZGallery Target Group
    Value: !Ref ZGalleryALBTargetGroup
    Export:
      Name: zgallery-target-group
  ZGalleryBackendTG:
    Description: ZGallery Backend Target Group
    Value: !Ref ZGalleryBackendALBTargetGroup
    Export:
      Name: zgallery-backend-target-group
  ZGalleryPicturesBucket:
    Description: ZGallery Pictures Bucket Name
    Value: !Ref ZGalleryPicturesBucket
    Export:
      Name: zgallery-pictures-bucket-name